#!/bin/bash
# aur-fetch - retrieve build files from the AUR
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=fetch
AUR_LOCATION=${AUR_LOCATION:-https://aur.archlinux.org}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[1]}(): }'

# default options
verbose=0 recurse=0 confirm_seen=0 results=0 update_refs=1 sync=no log_fmt=diff

usage() {
    cat <<! | base64 -d
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAs
XyAgICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
!
    plain >&2 'usage: %s [-L directory] [-Rrv] pkgname...' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    [[ -t 2 ]] && colorize
fi

opt_short='rvL:S'
opt_long=('recurse' 'verbose' 'write-log:' 'confirm-seen' 'sync:'
          'results:' 'format:' 'existing')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset log_dir results_file
while true; do
    case "$1" in
        -L|--write-log)
            shift
            log_dir=$1 ;;
        -r|--recurse)
            recurse=1 ;;
        -v|--verbose)
            verbose=1 ;;
        -S)
            sync=auto ;;
        --sync)
            shift
            case $1 in
                auto|reset|rebase|no)
                    sync=$1 ;;
                *)
                    error '%s: Invalid --sync option: %s' "$argv0" "$1"
                    usage ;;
            esac ;;
        --format)
            shift
            case $1 in
                diff|log)
                    log_fmt=$1 ;;
                *)
                    error '%s: Invalid --format option: %s' "$argv0" "$1"
                    usage ;;
            esac ;;
        --confirm-seen)
            confirm_seen=1 ;;
        --existing)
            update_refs=0 ;;
        --results)
            shift
            results_file=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}"
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

if [[ -v log_dir ]] && [[ ! -d $log_dir ]]; then
    error '%s: %s: Not a directory' "$argv0" "$log_dir"
    exit 20
fi

if [[ -v results_file ]]; then
    : >"$results_file" || exit 1 # truncate file
    results=1
fi

if ! (( $# )); then
    error '%s: No pkgname given' "$argv0"
    exit 1
fi

if (( confirm_seen )); then
    msg >&2 "Marking repositories as seen"
    ret=0

    for pkg in "$@"; do
        GIT_DIR=$pkg/.git git update-ref 'AUR_SEEN' 'HEAD' || ret=1
    done
    exit $ret
fi

# Default to showing PKGBUILD first in patch (#399)
mkdir -p "$XDG_CONFIG_HOME/aurutils/$argv0"
orderfile=$XDG_CONFIG_HOME/aurutils/$argv0/orderfile

if [[ ! -s $orderfile ]]; then
    printf 'PKGBUILD\n' > "$orderfile"
fi

# git helper functions
aur_diff() {
    git --no-pager "$1" --patch --stat "$2"
}
aur_fetch() {
    git fetch --verbose
}
aur_rebase() {
    git reset --hard 'HEAD'
    git rebase --verbose
}
aur_reset() {
    git reset --hard 'HEAD@{upstream}'
}
aur_rev() {
    git rev-parse --quiet --verify "$1"
}
aur_result() {
    printf '%s:file://%s\n' "$1" "$2"
}

if (( recurse )); then
    aur depends --pkgbase "$@"
else
    printf '%s\n' "$@"
fi | while read -r pkg; do
    # Avoid issues with filesystem boundaries (#274)
    export GIT_DIR=$pkg/.git GIT_WORK_TREE=$pkg

    # Reset/rebase if we are on valid repo
    if [[ -d $pkg ]] && git rev-parse --git-dir >/dev/null; then
        if ! seen=$(aur_rev 'AUR_SEEN'); then
            warning '%s: %s: AUR_SEEN object not found, assuming HEAD' "$argv0" "$pkg"
            # XXX fallback to empty tree object?
            seen=$(aur_rev 'HEAD')
        fi

        if (( update_refs )); then
            aur_fetch || exit 1

            case $sync in
                auto)
                    if [[ $(git config --get --type=bool aurutils.rebase) == 'true' ]]; then
                        plain >&2 'aurutils.rebase is set for %s' "$pkg"

                        # XXX only works if all upstream commits are fast-forwarded?
                        if ! git merge-base --is-ancestor 'HEAD@{upstream}' 'HEAD'; then
                            aur_rebase
                        else
                            : no new upstream commits
                        fi
                    else
                        if [[ $(aur_rev 'HEAD') != $(aur_rev 'HEAD@{upstream}') ]]; then
                            aur_reset
                        else
                            : no new upstream commits
                        fi
                    fi ;;
                reset|rebase)
                    aur_"$sync" ;;
            esac || {
                error '%s: %s: Failed to integrate changes' "$argv0" "$pkg"
                exit 1
            }

            if (( results )); then
                aur_result 'fetch' "$PWD/$pkg" | tee -a "$results_file"
            fi
        fi

        if [[ $seen != $(aur_rev 'HEAD') ]]; then
            # Contents have changed since last inspection; print differences
            range=${seen:+$seen..}HEAD

            if (( verbose )); then
                aur_diff "$log_fmt" "$range"
            fi

            if [[ $log_dir ]]; then
                aur_diff "$log_fmt" "$range" >"$log_dir/$pkg.$log_fmt"
            fi
        fi

    elif [[ -d $pkg ]]; then
        error '%s: %s is not a valid git repository' "$argv0" "$pkg"
        exit 22

    # Otherwise, try to clone anew
    elif git clone "$AUR_LOCATION/$pkg" "$GIT_DIR"; then
        # XXX initialize AUR_SEEN to empty tree object?
        #git update-ref 'AUR_SEEN' 4b825dc642cb6eb9a060e54bf8d69288fbee4904

        # Show PKGBUILDs first. (#399)
        git config diff.orderFile "$orderfile"

        if (( results )); then
            aur_result 'clone' "$PWD/$pkg" | tee -a "$results_file"
        fi
    else
        error '%s: %s: Failed to clone repository' "$argv0" "$pkg"
        exit 1
    fi
done

# vim: set et sw=4 sts=4 ft=sh:
